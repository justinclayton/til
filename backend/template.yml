AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:

  ParamProjectName:
    Type: String
  ParamBucketName:
    Type: String
  ParamENV:
    Type: String
  ParamKeyExpiration:
    Type: Number
    Default: 604800 # <-- 7 days

Resources:
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
      - IndexName: id-by-createdAt
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  Role: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Join [ -, [ !Ref ParamProjectName, !Ref ParamENV ] ]
      AuthenticationType: API_KEY

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      DefinitionS3Location: !Join [ "", ["s3://", !Ref ParamBucketName, "/schema.graphql"]]


  AppSyncDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      Name: PostsTable
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        TableName: !Ref PostsTable
        AwsRegion: us-west-2
      ServiceRoleArn: !GetAtt [ Role, Arn ]

  CreatePostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      TypeName: Mutation
      FieldName: createPost
      DataSourceName: !GetAtt [ AppSyncDataSource, Name ]
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.input),
          "condition": {
            "expression": "attribute_not_exists(#id)",
            "expressionNames": {
              "#id": "id",
            },
          },
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  IncrementVoteForPostResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      TypeName: Mutation
      FieldName: incrementVoteForPost
      DataSourceName: !GetAtt [ AppSyncDataSource, Name ]
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "UpdateItem",
          "key" : {
            "id" : { "S" : "${ctx.arguments.id}" }
          },
          "update" : {
            "expression" : "ADD votes :incr",
            "expressionValues" : { ":incr": { "N": 1 } }
          }
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)
  
  ListPostsQuery:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      TypeName: Query
      FieldName: listPosts
      DataSourceName: !GetAtt [ AppSyncDataSource, Name ]
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "limit": $util.defaultIfNull($ctx.args.first, 20),
          "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.after, null)),
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  GetPostQuery:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt [ AppSyncAPI, ApiId ]
      TypeName: Query
      FieldName: getPost
      DataSourceName: !GetAtt [ AppSyncDataSource, Name ]
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
          },
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  AppSyncAPIKey:
      Type: AWS::AppSync::ApiKey
      Properties:
        ApiId: !GetAtt [ AppSyncAPI, ApiId ]
        Expires: !Ref ParamKeyExpiration

Outputs:

  APIKey:
    Description: API Key
    Value: !GetAtt [ AppSyncAPIKey, ApiKey ]

  GraphQL:
    Description: GraphQL URL
    Value: !GetAtt [ AppSyncAPI, GraphQLUrl ]